AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  DBHOST:
    Type: String
    Default: "database-1.cwkdg0lodcd6.us-east-1.rds.amazonaws.com"

  DBNAME:
    Type: String
    Default: postgres

  DBPASSWORD:
    Type: String
    Default: fJOJFsr^xc55

  DBUSER:
    Type: String
    Default: restock

Globals:
  Function:
    Handler: handler.lambda_handler
    Runtime: python3.9
    MemorySize: 128
    Timeout: 60
    Tags:
      Proyecto: ReStock
    Layers:
      - !Ref ReStockLambdaLayer

  # Api:
  #   Cors:
  #     AllowMethods: "'OPTIONS,POST,GET'"
  #     AllowHeaders: "'*'"
  #     AllowOrigin: "'*'"

Resources:

  # S3 Buckets
  RestockRawBucketLayer:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: restock-s3-raw-layer
      AccessControl: Private

  # Lambda Layers
  ReStockLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: restock-layer
      ContentUri: common/restock-layer
      CompatibleRuntimes:
        - python3.9

  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: restock-cognito-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
          StringAttributeConstraints:
            MinLength: 5
            MaxLength: 128
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 256
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: true
          RequireLowercase: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: restock-cognito-user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      Description: ReStock admin user group
      GroupName: administrator

  ClientUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      Description: ReStock client user group
      GroupName: client

  # Roles
  CreateUserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AddUserToGroupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource:
                  - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambdas

  ## Auth Layer

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-signup
      # Events:
      #   SignUp:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /auth/signup
      #       Auth:
      #         Authorizer: NONE
      #       RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
          USER_GROUP_NAME: !Ref AdminUserGroup
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      Role: !GetAtt CreateUserFunctionRole.Arn

  VerifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-verify
      # Events:
      #   Verify:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /auth/verify
      #       Auth:
      #         Authorizer: NONE
      #       RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-signin
      # Events:
      #   Signin:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /auth/signin
      #       Auth:
      #         Authorizer: NONE
      #       RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient

  RefreshFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-refresh
      # Events:
      #   Refresh:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /auth/refresh
      #       Auth:
      #         Authorizer: NONE
      #       RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient

  ## Constructions
  RestockLambdaCreateConstructionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/restock-lambda-create-construction
      FunctionName: restock-lambda-create-construction
      Environment:
        Variables:
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      # Events:
      #   createConstruction:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /construction
      #       RestApiId: !Ref API

  RestockLambdaListConstructionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/restock-lambda-list-constructions
      FunctionName: restock-lambda-list-constructions
      Environment:
        Variables:
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      # Events:
      #   createConstruction:
      #     Type: Api
      #     Properties:
      #       Method: GET
      #       Path: /construction
      #       RestApiId: !Ref API

  RestockLambdaUploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: restock-lambda-upload-file
      CodeUri: lambdas/restock-lambda-upload-file
      Environment:
        Variables:
          BUCKET_NAME: !Ref RestockRawBucketLayer
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      # Events:
      #   UploadFileEvent:
      #     Type: Api
      #     Properties:
      #       Method: POST
      #       Path: /construction/{construction_id}/upload
      #       RestApiId: !Ref API
      Policies:
        - S3WritePolicy:
            BucketName: !Ref RestockRawBucketLayer



  # API

  RestockApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: restock-rest-api
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
        - application/vnd.ms-excel

  RestockCognitoUserPoolAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: "method.request.header.Authorization"
      Name: "cognito-authorizer"
      RestApiId: !Ref RestockApi
      Type: "COGNITO_USER_POOLS"
      ProviderARNs:
        - !Join [ "", !Split ['"', !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}'] ]

  VerifyUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VerifyUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  SignInFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SignInFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  SignUpFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SignUpFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  RefreshFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RefreshFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  RestockLambdaCreateConstructionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestockLambdaCreateConstructionFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  RestockLambdaListConstructionsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestockLambdaListConstructionsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  RestockLambdaUploadFileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestockLambdaUploadFileFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestockApi}/*"

  RestockApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestockApi
      StageName: production
    DependsOn:
      - VerifyUserFunctionPermission
      - SignInFunctionPermission
      - SignUpFunctionPermission
      - RefreshFunctionPermission
      - RestockLambdaCreateConstructionFunctionPermission
      - RestockLambdaListConstructionsFunctionPermission
      - RestockLambdaUploadFileFunctionPermission

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !GetAtt RestockApi.RootResourceId
      PathPart: auth

  AuthSignUpResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !Ref AuthResource
      PathPart: signup

  AuthVerifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !Ref AuthResource
      PathPart: verify

  AuthSignInResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !Ref AuthResource
      PathPart: signin

  AuthRefreshResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !Ref AuthResource
      PathPart: refresh

  ConstructionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !GetAtt RestockApi.RootResourceId
      PathPart: construction

  ConstructionUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestockApi
      ParentId: !Ref ConstructionResource
      PathPart: upload

  ## METHODS

  # Auth
  AuthSignUpPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthSignUpResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpFunction.Arn}/invocations"

  AuthVerifyPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthVerifyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyUserFunction.Arn}/invocations"

  AuthSignInPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthSignInResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignInFunction.Arn}/invocations"

  AuthRefreshPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthRefreshResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RefreshFunction.Arn}/invocations"

  # Construction
  ConstructionPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref ConstructionResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestockCognitoUserPoolAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestockLambdaCreateConstructionFunction.Arn}/invocations"

  ConstructionsGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref ConstructionResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestockCognitoUserPoolAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestockLambdaListConstructionsFunction.Arn}/invocations"

  ConstructionUploadPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref ConstructionUploadResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestockCognitoUserPoolAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestockLambdaUploadFileFunction.Arn}/invocations"

  SignUpOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthSignUpResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 201
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 401
            SelectionPattern: '401'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 201
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 401
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  VerifyOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthVerifyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '400'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  SignInOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthSignInResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '400'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  RefreshOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref AuthRefreshResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '400'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ConstructionOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref ConstructionResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 201
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '400'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 201
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ConstructionUploadOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestockApi
      ResourceId: !Ref ConstructionUploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 201
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '400'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
          - StatusCode: 500
            SelectionPattern: '5\\d{2}'
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: restock-rest-api
  #     StageName: production
  #     BinaryMediaTypes:
  #       - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
  #       - application/vnd.ms-excel
  #     Auth:
  #       DefaultAuthorizer: CognitoUserPoolAuthorizer
  #       Authorizers:
  #         CognitoUserPoolAuthorizer:
  #           UserPoolArn: !GetAtt UserPool.Arn

  # RestockApiRootMethodOptions:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: NONE
  #     RestApiId: !Ref RestockApi
  #     ResourceId: !Ref RestockApiRootResource
  #     HttpMethod: OPTIONS
  #     RequestParameters: {}
  #     MethodResponses:
  #       - StatusCode: '200'
  #         ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #           method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
  #           method.response.header.Access-Control-Allow-Origin: "'*'"
  #         ResponseModels:
  #           application/json: 'Empty'

  

Outputs:
  ApiUrl:
    Description: URL of ReStock REST API
    Value: !Sub "https://${RestockApi}.execute-api.${AWS::Region}.amazonaws.com/production/"
