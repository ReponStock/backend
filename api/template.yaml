AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  DBHOST:
    Type: String
    Default: "database-1.cwkdg0lodcd6.us-east-1.rds.amazonaws.com"

  DBNAME:
    Type: String
    Default: postgres

  DBPASSWORD:
    Type: String
    Default: fJOJFsr^xc55

  DBUSER:
    Type: String
    Default: restock

Globals:
  Function:
    Handler: handler.lambda_handler
    Runtime: python3.9
    MemorySize: 128
    Timeout: 60
    Tags:
      Proyecto: ReStock
    Layers:
      - !Ref ReStockLambdaLayer
    
    Api:
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

Resources:

  # S3 Buckets
  RestockRawBucketLayer:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: restock-s3-raw-layer
      AccessControl: Private

  # Lambda Layers
  ReStockLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: restock-layer
      ContentUri: common/restock-layer
      CompatibleRuntimes:
        - python3.9

  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: restock-cognito-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
          StringAttributeConstraints:
            MinLength: 5
            MaxLength: 128
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 256
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: true
          RequireLowercase: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: restock-cognito-user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      Description: ReStock admin user group
      GroupName: administrator

  ClientUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      Description: ReStock client user group
      GroupName: client

  # Roles
  CreateUserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AddUserToGroupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource:
                  - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # API
  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: restock-rest-api
      StageName: production
      BinaryMediaTypes:
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
        - application/vnd.ms-excel
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuthorizer
        Authorizers:
          CognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Lambdas

  ## Auth Layer

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-signup
      Events:
        SignUp:
          Type: Api
          Properties:
            Method: POST
            Path: /auth/signup
            Auth:
              Authorizer: NONE
            RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
          USER_GROUP_NAME: !Ref AdminUserGroup
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      Role: !GetAtt CreateUserFunctionRole.Arn

  VerifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-verify
      Events:
        Verify:
          Type: Api
          Properties:
            Method: POST
            Path: /auth/verify
            Auth:
              Authorizer: NONE
            RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-signin
      Events:
        Signin:
          Type: Api
          Properties:
            Method: POST
            Path: /auth/signin
            Auth:
              Authorizer: NONE
            RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient

  RefreshFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/auth-layer/restock-lambda-auth-refresh
      Events:
        Refresh:
          Type: Api
          Properties:
            Method: POST
            Path: /auth/refresh
            Auth:
              Authorizer: NONE
            RestApiId: !Ref API
      Environment:
        Variables:
          APP_CLIENT_ID: !Ref UserPoolClient

  ## Constructions
  RestockLambdaCreateConstructionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/restock-lambda-create-construction
      FunctionName: restock-lambda-create-construction
      Environment:
        Variables:
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      Events:
        createConstruction:
          Type: Api
          Properties:
            Method: POST
            Path: /construction
            RestApiId: !Ref API

  RestockLambdaListConstructionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/restock-lambda-list-constructions
      FunctionName: restock-lambda-list-constructions
      Environment:
        Variables:
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      Events:
        createConstruction:
          Type: Api
          Properties:
            Method: GET
            Path: /construction
            RestApiId: !Ref API

  RestockLambdaUploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: restock-lambda-upload-file
      CodeUri: lambdas/restock-lambda-upload-file
      Environment:
        Variables:
          BUCKET_NAME: !Ref RestockRawBucketLayer
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          DB_USER: !Ref DBUSER
      Events:
        UploadFileEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /construction/{construction_id}/upload
            RestApiId: !Ref API
      Policies:
        - S3WritePolicy:
            BucketName: !Ref RestockRawBucketLayer

Outputs:
  ApiUrl:
    Description: URL of ReStock REST API
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/production/"
